/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';
import { createContext, useState, ReactNode } from 'react';
import { MFO, News, Author, Category, Review, Question, QuestionAnswer, License, Tag, NewsLike } from '../lib/types';

interface DataContextType {
  activeSection: string;
  setActiveSection: (section: string) => void;
  searchTerm: string;
  setSearchTerm: (term: string) => void;
  isModalOpen: boolean;
  setIsModalOpen: (open: boolean) => void;
  modalMode: 'create' | 'edit' | 'view';
  setModalMode: (mode: 'create' | 'edit' | 'view') => void;
  selectedItem: any;
  setSelectedItem: (item: any) => void;
  mfos: MFO[];
  setMfos: (mfos: MFO[]) => void;
  news: News[];
  setNews: (news: News[]) => void;
  authors: Author[];
  setAuthors: (authors: Author[]) => void;
  categories: Category[];
  setCategories: (categories: Category[]) => void;
  reviews: Review[];
  setReviews: (reviews: Review[]) => void;
  questions: Question[];
  setQuestions: (questions: Question[]) => void;
  questionAnswers: QuestionAnswer[];
  setQuestionAnswers: (questionAnswers: QuestionAnswer[]) => void;
  licenses: License[];
  setLicenses: (licenses: License[]) => void;
  tags: Tag[];
  setTags: (tags: Tag[]) => void;
  newsLikes: NewsLike[];
  setNewsLikes: (newsLikes: NewsLike[]) => void;
  handleDelete: (type: string, id: number) => void;
  handleSave: (type: string, data: any) => void;
}

export const DataContext = createContext<DataContextType>({
  activeSection: 'dashboard',
  setActiveSection: () => {},
  searchTerm: '',
  setSearchTerm: () => {},
  isModalOpen: false,
  setIsModalOpen: () => {},
  modalMode: 'create',
  setModalMode: () => {},
  selectedItem: null,
  setSelectedItem: () => {},
  mfos: [],
  setMfos: () => {},
  news: [],
  setNews: () => {},
  authors: [],
  setAuthors: () => {},
  categories: [],
  setCategories: () => {},
  reviews: [],
  setReviews: () => {},
  questions: [],
  setQuestions: () => {},
  questionAnswers: [],
  setQuestionAnswers: () => {},
  licenses: [],
  setLicenses: () => {},
  tags: [],
  setTags: () => {},
  newsLikes: [],
  setNewsLikes: () => {},
  handleDelete: () => {},
  handleSave: () => {},
});

export function DataProvider({ children }: { children: ReactNode }) {
  const [activeSection, setActiveSection] = useState('dashboard');
  const [searchTerm, setSearchTerm] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'create' | 'edit' | 'view'>('create');
  const [selectedItem, setSelectedItem] = useState<any>(null);

  // Mock data (same as original)
  const [mfos, setMfos] = useState<MFO[]>([
    {
      id: 1,
      name: 'Lime –ú–§–û',
      rating: 4.5,
      reviews: 1250,
      logo: 'üü¢',
      licenseNumber: '–ú–§–û-001',
      minAmount: 1000,
      maxAmount: 30000,
      minTerm: 5,
      maxTerm: 30,
      rateMin: 0.8,
      rateMax: 2.0,
      approvalRate: 87,
      decisionTime: '15 –º–∏–Ω',
      isFirstLoanZero: true,
      isInstantApproval: true,
      phone: '+7 (800) 555-0001',
      website: 'lime-mfo.ru',
      createdAt: '2025-01-15',
      ageFrom: 18,
      ageTo: 70,
      citizenship: '–†–§',
      documents: '–ü–∞—Å–ø–æ—Ä—Ç –†–§',
      description: '–ù–∞–¥–µ–∂–Ω–∞—è –ú–§–û —Å –≤—ã–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
      isNoIncomeProof: true,
      is24Support: true,
      isSafeTransactions: true,
      isFlexibleTerms: true,
      workTimeWeekdays: '9:00-18:00',
      workTimeWeekend: '10:00-16:00',
      workTimeOnline: '24/7',
    },
    {
      id: 2,
      name: 'MoneyMan',
      rating: 4.2,
      reviews: 890,
      logo: 'üí∞',
      licenseNumber: '–ú–§–û-002',
      minAmount: 500,
      maxAmount: 25000,
      minTerm: 7,
      maxTerm: 45,
      rateMin: 1.0,
      rateMax: 2.5,
      approvalRate: 82,
      decisionTime: '30 –º–∏–Ω',
      isFirstLoanZero: false,
      isInstantApproval: true,
      phone: '+7 (800) 555-0002',
      website: 'moneyman.ru',
      createdAt: '2025-01-10',
      ageFrom: 20,
      ageTo: 65,
      citizenship: '–†–§',
      documents: '–ü–∞—Å–ø–æ—Ä—Ç –†–§',
      description: '–ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–π–º–æ–≤',
      isNoIncomeProof: false,
      is24Support: false,
      isSafeTransactions: true,
      isFlexibleTerms: false,
      workTimeWeekdays: '8:00-20:00',
      workTimeWeekend: '9:00-17:00',
      workTimeOnline: '24/7',
    },
  ]);

  const [news, setNews] = useState<News[]>([
    {
      id: 1,
      title: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–π—Ñ–æ–Ω–æ–≤',
      slug: 'alfa-bank-new-ios-app',
      body: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º...',
      published: true,
      views: 36,
      authorId: 1,
      author: { name: '–û–ª—å–≥–∞ –ü–∏—Ö–æ–¥—Å–∫–∞—è' },
      newsCategoryId: 1,
      NewsCategory: { name: '–ù–æ–≤–æ—Å—Ç–∏', icon: 'üì∞' },
      readingMinutes: 5,
      createdAt: '2025-07-11',
    },
    {
      id: 2,
      title: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—á–µ–º –ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç',
      slug: 'credit-payment-problems',
      body: '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏...',
      published: true,
      views: 79100,
      authorId: 2,
      author: { name: '–ò—Ä–∏–Ω–∞ –ö–∞–ª–∏–º—É–ª–∏–Ω–∞' },
      newsCategoryId: 2,
      NewsCategory: { name: '–ü–æ—Å–æ–±–∏—è', icon: 'üìö' },
      readingMinutes: 8,
      createdAt: '2025-07-11',
    },
  ]);

  const [authors, setAuthors] = useState<Author[]>([
    {
      id: 1,
      name: '–û–ª—å–≥–∞ –ü–∏—Ö–æ–¥—Å–∫–∞—è',
      bio: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º',
      avatarUrl: null,
      totalViews: 120000,
      totalPosts: 47,
    },
    {
      id: 2,
      name: '–ò—Ä–∏–Ω–∞ –ö–∞–ª–∏–º—É–ª–∏–Ω–∞',
      bio: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º',
      avatarUrl: null,
      totalViews: 200000,
      totalPosts: 63,
    },
  ]);

  const [categories, setCategories] = useState<Category[]>([
    { id: 1, name: '–ù–æ–≤–æ—Å—Ç–∏', icon: 'üì∞' },
    { id: 2, name: '–ü–æ—Å–æ–±–∏—è', icon: 'üìö' },
    { id: 3, name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' },
    { id: 4, name: '–î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã', icon: 'üí≥' },
  ]);

  const [reviews, setReviews] = useState<Review[]>([
    {
      id: 1,
      rating: 5,
      textOriginal: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –±—ã—Å—Ç—Ä–æ –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞–π–º!',
      isModerated: true,
      targetType: 'mfo',
      targetId: 1,
      createdAt: '2025-07-15',
    },
    {
      id: 2,
      rating: 4,
      textOriginal: '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è, –Ω–æ –¥–æ–ª–≥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –∑–∞—è–≤–∫—É',
      isModerated: false,
      targetType: 'mfo',
      targetId: 2,
      createdAt: '2025-07-14',
    },
  ]);

  const [questions, setQuestions] = useState<Question[]>([
    {
      id: 1,
      textOriginal: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–π–º?',
      isModerated: false,
      targetType: 'mfo',
      targetId: 1,
      createdAt: '2025-07-15',
    },
  ]);

  const [questionAnswers, setQuestionAnswers] = useState<QuestionAnswer[]>([
    {
      id: 1,
      questionId: 1,
      textOriginal: '–ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç',
      isModerated: true,
      createdAt: '2025-07-15',
    },
  ]);

  const [licenses, setLicenses] = useState<License[]>([
    {
      id: 1,
      number: 'LIC-001',
      issuedAt: '2025-01-01',
      validTill: '2026-01-01',
      mfoId: 1,
    },
  ]);

  const [tags, setTags] = useState<Tag[]>([
    { id: 1, name: '–§–∏–Ω–∞–Ω—Å—ã' },
    { id: 2, name: '–ö—Ä–µ–¥–∏—Ç—ã' },
  ]);

  const [newsLikes, setNewsLikes] = useState<NewsLike[]>([
    {
      id: 1,
      newsId: 1,
      createdAt: '2025-07-15',
      ipHash: 'xxx',
      fingerprint: 'yyy',
      cookieId: 'zzz',
    },
  ]);

  const handleDelete = (type: string, id: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) return;

    switch (type) {
      case 'mfo':
        setMfos(mfos.filter(item => item.id !== id));
        break;
      case 'news':
        setNews(news.filter(item => item.id !== id));
        break;
      case 'author':
        setAuthors(authors.filter(item => item.id !== id));
        break;
      case 'category':
        setCategories(categories.filter(item => item.id !== id));
        break;
      case 'review':
        setReviews(reviews.filter(item => item.id !== id));
        break;
      case 'question':
        setQuestions(questions.filter(item => item.id !== id));
        break;
      case 'questionAnswer':
        setQuestionAnswers(questionAnswers.filter(item => item.id !== id));
        break;
      case 'license':
        setLicenses(licenses.filter(item => item.id !== id));
        break;
      case 'tag':
        setTags(tags.filter(item => item.id !== id));
        break;
      case 'newsLike':
        setNewsLikes(newsLikes.filter(item => item.id !== id));
        break;
    }
  };

  const handleSave = (type: string, data: any) => {
    switch (type) {
      case 'mfo':
        if (modalMode === 'create') {
          setMfos([...mfos, { ...data, id: mfos.length + 1, createdAt: new Date().toISOString() }]);
        } else {
          setMfos(mfos.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'news':
        if (modalMode === 'create') {
          setNews([...news, { ...data, id: news.length + 1, createdAt: new Date().toISOString() }]);
        } else {
          setNews(news.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'author':
        if (modalMode === 'create') {
          setAuthors([...authors, { ...data, id: authors.length + 1 }]);
        } else {
          setAuthors(authors.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'category':
        if (modalMode === 'create') {
          setCategories([...categories, { ...data, id: categories.length + 1 }]);
        } else {
          setCategories(categories.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'review':
        if (modalMode === 'create') {
          setReviews([...reviews, { ...data, id: reviews.length + 1, createdAt: new Date().toISOString() }]);
        } else {
          setReviews(reviews.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'question':
        if (modalMode === 'create') {
          setQuestions([...questions, { ...data, id: questions.length + 1, createdAt: new Date().toISOString() }]);
        } else {
          setQuestions(questions.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'questionAnswer':
        if (modalMode === 'create') {
          setQuestionAnswers([...questionAnswers, { ...data, id: questionAnswers.length + 1, createdAt: new Date().toISOString() }]);
        } else {
          setQuestionAnswers(questionAnswers.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'license':
        if (modalMode === 'create') {
          setLicenses([...licenses, { ...data, id: licenses.length + 1 }]);
        } else {
          setLicenses(licenses.map(item => item.id === data.id ? data : item));
        }
        break;
      case 'tag':
        if (modalMode === 'create') {
          setTags([...tags, { ...data, id: tags.length + 1 }]);
        } else {
          setTags(tags.map(item => item.id === data.id ? data : item));
        }
        break;
    }
    setIsModalOpen(false);
    setSelectedItem(null);
  };

  return (
    <DataContext.Provider
      value={{
        activeSection,
        setActiveSection,
        searchTerm,
        setSearchTerm,
        isModalOpen,
        setIsModalOpen,
        modalMode,
        setModalMode,
        selectedItem,
        setSelectedItem,
        mfos,
        setMfos,
        news,
        setNews,
        authors,
        setAuthors,
        categories,
        setCategories,
        reviews,
        setReviews,
        questions,
        setQuestions,
        questionAnswers,
        setQuestionAnswers,
        licenses,
        setLicenses,
        tags,
        setTags,
        newsLikes,
        setNewsLikes,
        handleDelete,
        handleSave,
      }}
    >
      {children}
    </DataContext.Provider>
  );
}